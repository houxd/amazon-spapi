/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_transfer_preview`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransferPreviewError {
    Status400(models::seller_wallet_2024_03_01::ErrorList),
    Status403(models::seller_wallet_2024_03_01::ErrorList),
    Status404(models::seller_wallet_2024_03_01::ErrorList),
    Status408(models::seller_wallet_2024_03_01::ErrorList),
    Status413(models::seller_wallet_2024_03_01::ErrorList),
    Status415(models::seller_wallet_2024_03_01::ErrorList),
    Status429(models::seller_wallet_2024_03_01::ErrorList),
    Status500(models::seller_wallet_2024_03_01::ErrorList),
    Status503(models::seller_wallet_2024_03_01::ErrorList),
    UnknownValue(serde_json::Value),
}


/// Returns list of potential fees on a transaction based on the source and destination country currency code
pub async fn get_transfer_preview(configuration: &configuration::Configuration, source_country_code: &str, source_currency_code: &str, destination_country_code: &str, destination_currency_code: &str, base_amount: f64) -> Result<models::seller_wallet_2024_03_01::TransferRatePreview, Error<GetTransferPreviewError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_source_country_code = source_country_code;
    let p_source_currency_code = source_currency_code;
    let p_destination_country_code = destination_country_code;
    let p_destination_currency_code = destination_currency_code;
    let p_base_amount = base_amount;

    let uri_str = format!("{}/finances/transfers/wallet/2024-03-01/transferPreview", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("sourceCountryCode", &p_source_country_code.to_string())]);
    req_builder = req_builder.query(&[("sourceCurrencyCode", &p_source_currency_code.to_string())]);
    req_builder = req_builder.query(&[("destinationCountryCode", &p_destination_country_code.to_string())]);
    req_builder = req_builder.query(&[("destinationCurrencyCode", &p_destination_currency_code.to_string())]);
    req_builder = req_builder.query(&[("baseAmount", &p_base_amount.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::seller_wallet_2024_03_01::TransferRatePreview`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::seller_wallet_2024_03_01::TransferRatePreview`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetTransferPreviewError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

