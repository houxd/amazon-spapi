/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listing Items API Use Case Guide](doc:listings-items-api-v2020-09-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2020-09-01
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`delete_listings_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteListingsItemError {
    Status400(models::listings_items_2020_09_01::ErrorList),
    Status403(models::listings_items_2020_09_01::ErrorList),
    Status413(models::listings_items_2020_09_01::ErrorList),
    Status415(models::listings_items_2020_09_01::ErrorList),
    Status429(models::listings_items_2020_09_01::ErrorList),
    Status500(models::listings_items_2020_09_01::ErrorList),
    Status503(models::listings_items_2020_09_01::ErrorList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`patch_listings_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PatchListingsItemError {
    Status400(models::listings_items_2020_09_01::ErrorList),
    Status403(models::listings_items_2020_09_01::ErrorList),
    Status413(models::listings_items_2020_09_01::ErrorList),
    Status415(models::listings_items_2020_09_01::ErrorList),
    Status429(models::listings_items_2020_09_01::ErrorList),
    Status500(models::listings_items_2020_09_01::ErrorList),
    Status503(models::listings_items_2020_09_01::ErrorList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_listings_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutListingsItemError {
    Status400(models::listings_items_2020_09_01::ErrorList),
    Status403(models::listings_items_2020_09_01::ErrorList),
    Status413(models::listings_items_2020_09_01::ErrorList),
    Status415(models::listings_items_2020_09_01::ErrorList),
    Status429(models::listings_items_2020_09_01::ErrorList),
    Status500(models::listings_items_2020_09_01::ErrorList),
    Status503(models::listings_items_2020_09_01::ErrorList),
    UnknownValue(serde_json::Value),
}


/// Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn delete_listings_item(configuration: &configuration::Configuration, seller_id: &str, sku: &str, marketplace_ids: Vec<String>, issue_locale: Option<&str>) -> Result<models::listings_items_2020_09_01::ListingsItemSubmissionResponse, Error<DeleteListingsItemError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_seller_id = seller_id;
    let p_sku = sku;
    let p_marketplace_ids = marketplace_ids;
    let p_issue_locale = issue_locale;

    let uri_str = format!("{}/listings/2020-09-01/items/{sellerId}/{sku}", configuration.base_path, sellerId=crate::apis::urlencode(p_seller_id), sku=crate::apis::urlencode(p_sku));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&p_marketplace_ids.into_iter().map(|p| ("marketplaceIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("marketplaceIds", &p_marketplace_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_issue_locale {
        req_builder = req_builder.query(&[("issueLocale", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::listings_items_2020_09_01::ListingsItemSubmissionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::listings_items_2020_09_01::ListingsItemSubmissionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteListingsItemError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn patch_listings_item(configuration: &configuration::Configuration, seller_id: &str, sku: &str, marketplace_ids: Vec<String>, body: models::listings_items_2020_09_01::ListingsItemPatchRequest, issue_locale: Option<&str>) -> Result<models::listings_items_2020_09_01::ListingsItemSubmissionResponse, Error<PatchListingsItemError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_seller_id = seller_id;
    let p_sku = sku;
    let p_marketplace_ids = marketplace_ids;
    let p_body = body;
    let p_issue_locale = issue_locale;

    let uri_str = format!("{}/listings/2020-09-01/items/{sellerId}/{sku}", configuration.base_path, sellerId=crate::apis::urlencode(p_seller_id), sku=crate::apis::urlencode(p_sku));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&p_marketplace_ids.into_iter().map(|p| ("marketplaceIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("marketplaceIds", &p_marketplace_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_issue_locale {
        req_builder = req_builder.query(&[("issueLocale", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::listings_items_2020_09_01::ListingsItemSubmissionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::listings_items_2020_09_01::ListingsItemSubmissionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PatchListingsItemError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a new or fully-updates an existing listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn put_listings_item(configuration: &configuration::Configuration, seller_id: &str, sku: &str, marketplace_ids: Vec<String>, body: models::listings_items_2020_09_01::ListingsItemPutRequest, issue_locale: Option<&str>) -> Result<models::listings_items_2020_09_01::ListingsItemSubmissionResponse, Error<PutListingsItemError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_seller_id = seller_id;
    let p_sku = sku;
    let p_marketplace_ids = marketplace_ids;
    let p_body = body;
    let p_issue_locale = issue_locale;

    let uri_str = format!("{}/listings/2020-09-01/items/{sellerId}/{sku}", configuration.base_path, sellerId=crate::apis::urlencode(p_seller_id), sku=crate::apis::urlencode(p_sku));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&p_marketplace_ids.into_iter().map(|p| ("marketplaceIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("marketplaceIds", &p_marketplace_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_issue_locale {
        req_builder = req_builder.query(&[("issueLocale", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::listings_items_2020_09_01::ListingsItemSubmissionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::listings_items_2020_09_01::ListingsItemSubmissionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PutListingsItemError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

