/*
 * Selling Partner API for Uploads
 *
 * The Uploads API lets you upload files that you can programmatically access using other Selling Partner APIs, such as the A+ Content API and the Messaging API.
 *
 * The version of the OpenAPI document: 2020-11-01
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_upload_destination_for_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUploadDestinationForResourceError {
    Status400(models::uploads_2020_11_01::CreateUploadDestinationResponse),
    Status403(models::uploads_2020_11_01::CreateUploadDestinationResponse),
    Status404(models::uploads_2020_11_01::CreateUploadDestinationResponse),
    Status413(models::uploads_2020_11_01::CreateUploadDestinationResponse),
    Status415(models::uploads_2020_11_01::CreateUploadDestinationResponse),
    Status429(models::uploads_2020_11_01::CreateUploadDestinationResponse),
    Status500(models::uploads_2020_11_01::CreateUploadDestinationResponse),
    Status503(models::uploads_2020_11_01::CreateUploadDestinationResponse),
    UnknownValue(serde_json::Value),
}


/// Creates an upload destination, returning the information required to upload a file to the destination and to programmatically access the file.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn create_upload_destination_for_resource(configuration: &configuration::Configuration, marketplace_ids: Vec<String>, content_md5: &str, resource: &str, content_type: Option<&str>) -> Result<models::uploads_2020_11_01::CreateUploadDestinationResponse, Error<CreateUploadDestinationForResourceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_marketplace_ids = marketplace_ids;
    let p_content_md5 = content_md5;
    let p_resource = resource;
    let p_content_type = content_type;

    let uri_str = format!("{}/uploads/2020-11-01/uploadDestinations/{resource}", configuration.base_path, resource=crate::apis::urlencode(p_resource));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&p_marketplace_ids.into_iter().map(|p| ("marketplaceIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("marketplaceIds", &p_marketplace_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    req_builder = req_builder.query(&[("contentMD5", &p_content_md5.to_string())]);
    if let Some(ref param_value) = p_content_type {
        req_builder = req_builder.query(&[("contentType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::uploads_2020_11_01::CreateUploadDestinationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::uploads_2020_11_01::CreateUploadDestinationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateUploadDestinationForResourceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

