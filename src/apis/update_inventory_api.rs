/*
 * Selling Partner API for Direct Fulfillment Inventory Updates
 *
 * The Selling Partner API for Direct Fulfillment Inventory Updates provides programmatic access to a direct fulfillment vendor's inventory updates.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`submit_inventory_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitInventoryUpdateError {
    Status400(models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse),
    Status403(models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse),
    Status404(models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse),
    Status413(models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse),
    Status415(models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse),
    Status429(models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse),
    Status500(models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse),
    Status503(models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse),
    UnknownValue(serde_json::Value),
}


/// Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn submit_inventory_update(configuration: &configuration::Configuration, warehouse_id: &str, body: models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateRequest) -> Result<models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse, Error<SubmitInventoryUpdateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_warehouse_id = warehouse_id;
    let p_body = body;

    let uri_str = format!("{}/vendor/directFulfillment/inventory/v1/warehouses/{warehouseId}/items", configuration.base_path, warehouseId=crate::apis::urlencode(p_warehouse_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_inventory_v1::SubmitInventoryUpdateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SubmitInventoryUpdateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

