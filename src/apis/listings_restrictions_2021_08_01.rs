/*
 * Selling Partner API for Listings Restrictions
 *
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_listings_restrictions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetListingsRestrictionsError {
    Status400(Vec<models::listings_restrictions_2021_08_01::Error>),
    Status403(Vec<models::listings_restrictions_2021_08_01::Error>),
    Status404(Vec<models::listings_restrictions_2021_08_01::Error>),
    Status413(Vec<models::listings_restrictions_2021_08_01::Error>),
    Status415(Vec<models::listings_restrictions_2021_08_01::Error>),
    Status429(Vec<models::listings_restrictions_2021_08_01::Error>),
    Status500(Vec<models::listings_restrictions_2021_08_01::Error>),
    Status503(Vec<models::listings_restrictions_2021_08_01::Error>),
    UnknownValue(serde_json::Value),
}


/// Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_listings_restrictions(configuration: &configuration::Configuration, asin: &str, seller_id: &str, marketplace_ids: Vec<String>, condition_type: Option<&str>, reason_locale: Option<&str>) -> Result<models::listings_restrictions_2021_08_01::RestrictionList, Error<GetListingsRestrictionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_asin = asin;
    let p_seller_id = seller_id;
    let p_marketplace_ids = marketplace_ids;
    let p_condition_type = condition_type;
    let p_reason_locale = reason_locale;

    let uri_str = format!("{}/listings/2021-08-01/restrictions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("asin", &p_asin.to_string())]);
    if let Some(ref param_value) = p_condition_type {
        req_builder = req_builder.query(&[("conditionType", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("sellerId", &p_seller_id.to_string())]);
    req_builder = match "csv" {
        "multi" => req_builder.query(&p_marketplace_ids.into_iter().map(|p| ("marketplaceIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("marketplaceIds", &p_marketplace_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_reason_locale {
        req_builder = req_builder.query(&[("reasonLocale", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::listings_restrictions_2021_08_01::RestrictionList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::listings_restrictions_2021_08_01::RestrictionList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetListingsRestrictionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

