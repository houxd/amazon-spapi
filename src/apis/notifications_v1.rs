/*
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_destination`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateDestinationError {
    Status400(models::notifications::CreateDestinationResponse),
    Status403(models::notifications::CreateDestinationResponse),
    Status404(models::notifications::CreateDestinationResponse),
    Status409(models::notifications::CreateDestinationResponse),
    Status413(models::notifications::CreateDestinationResponse),
    Status415(models::notifications::CreateDestinationResponse),
    Status429(models::notifications::CreateDestinationResponse),
    Status500(models::notifications::CreateDestinationResponse),
    Status503(models::notifications::CreateDestinationResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_subscription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSubscriptionError {
    Status400(models::notifications::CreateSubscriptionResponse),
    Status403(models::notifications::CreateSubscriptionResponse),
    Status404(models::notifications::CreateSubscriptionResponse),
    Status409(models::notifications::CreateSubscriptionResponse),
    Status413(models::notifications::CreateSubscriptionResponse),
    Status415(models::notifications::CreateSubscriptionResponse),
    Status429(models::notifications::CreateSubscriptionResponse),
    Status500(models::notifications::CreateSubscriptionResponse),
    Status503(models::notifications::CreateSubscriptionResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_destination`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDestinationError {
    Status400(models::notifications::DeleteDestinationResponse),
    Status403(models::notifications::DeleteDestinationResponse),
    Status404(models::notifications::DeleteDestinationResponse),
    Status409(models::notifications::DeleteDestinationResponse),
    Status413(models::notifications::DeleteDestinationResponse),
    Status415(models::notifications::DeleteDestinationResponse),
    Status429(models::notifications::DeleteDestinationResponse),
    Status500(models::notifications::DeleteDestinationResponse),
    Status503(models::notifications::DeleteDestinationResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_subscription_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSubscriptionByIdError {
    Status400(models::notifications::DeleteSubscriptionByIdResponse),
    Status403(models::notifications::DeleteSubscriptionByIdResponse),
    Status404(models::notifications::DeleteSubscriptionByIdResponse),
    Status409(models::notifications::DeleteSubscriptionByIdResponse),
    Status413(models::notifications::DeleteSubscriptionByIdResponse),
    Status415(models::notifications::DeleteSubscriptionByIdResponse),
    Status429(models::notifications::DeleteSubscriptionByIdResponse),
    Status500(models::notifications::DeleteSubscriptionByIdResponse),
    Status503(models::notifications::DeleteSubscriptionByIdResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_destination`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDestinationError {
    Status400(models::notifications::GetDestinationResponse),
    Status403(models::notifications::GetDestinationResponse),
    Status404(models::notifications::GetDestinationResponse),
    Status409(models::notifications::GetDestinationResponse),
    Status413(models::notifications::GetDestinationResponse),
    Status415(models::notifications::GetDestinationResponse),
    Status429(models::notifications::GetDestinationResponse),
    Status500(models::notifications::GetDestinationResponse),
    Status503(models::notifications::GetDestinationResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_destinations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDestinationsError {
    Status400(models::notifications::GetDestinationsResponse),
    Status403(models::notifications::GetDestinationsResponse),
    Status404(models::notifications::GetDestinationsResponse),
    Status409(models::notifications::GetDestinationsResponse),
    Status413(models::notifications::GetDestinationsResponse),
    Status415(models::notifications::GetDestinationsResponse),
    Status429(models::notifications::GetDestinationsResponse),
    Status500(models::notifications::GetDestinationsResponse),
    Status503(models::notifications::GetDestinationsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_subscription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubscriptionError {
    Status400(models::notifications::GetSubscriptionResponse),
    Status403(models::notifications::GetSubscriptionResponse),
    Status404(models::notifications::GetSubscriptionResponse),
    Status413(models::notifications::GetSubscriptionResponse),
    Status415(models::notifications::GetSubscriptionResponse),
    Status429(models::notifications::GetSubscriptionResponse),
    Status500(models::notifications::GetSubscriptionResponse),
    Status503(models::notifications::GetSubscriptionResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_subscription_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubscriptionByIdError {
    Status400(models::notifications::GetSubscriptionByIdResponse),
    Status403(models::notifications::GetSubscriptionByIdResponse),
    Status404(models::notifications::GetSubscriptionResponse),
    Status409(models::notifications::GetSubscriptionByIdResponse),
    Status413(models::notifications::GetSubscriptionByIdResponse),
    Status415(models::notifications::GetSubscriptionByIdResponse),
    Status429(models::notifications::GetSubscriptionByIdResponse),
    Status500(models::notifications::GetSubscriptionByIdResponse),
    Status503(models::notifications::GetSubscriptionByIdResponse),
    UnknownValue(serde_json::Value),
}


/// Creates a destination resource to receive notifications. The `createDestination` operation is grantless. For more information, refer to [Grantless operations](https://developer-docs.amazon.com/sp-api/docs/grantless-operations).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn create_destination(configuration: &configuration::Configuration, body: models::notifications::CreateDestinationRequest) -> Result<models::notifications::CreateDestinationResponse, Error<CreateDestinationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/notifications/v1/destinations", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::notifications::CreateDestinationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::notifications::CreateDestinationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateDestinationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a subscription for the specified notification type to be delivered to the specified destination. Before you can subscribe, you must first create the destination by calling the `createDestination` operation. In cases where the specified notification type supports multiple payload versions, you can utilize this API to subscribe to a different payload version if you already have an existing subscription for a different payload version.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn create_subscription(configuration: &configuration::Configuration, notification_type: &str, body: models::notifications::CreateSubscriptionRequest) -> Result<models::notifications::CreateSubscriptionResponse, Error<CreateSubscriptionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_notification_type = notification_type;
    let p_body = body;

    let uri_str = format!("{}/notifications/v1/subscriptions/{notificationType}", configuration.base_path, notificationType=crate::apis::urlencode(p_notification_type));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::notifications::CreateSubscriptionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::notifications::CreateSubscriptionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSubscriptionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes the destination that you specify. The `deleteDestination` operation is grantless. For more information, refer to [Grantless operations](https://developer-docs.amazon.com/sp-api/docs/grantless-operations).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn delete_destination(configuration: &configuration::Configuration, destination_id: &str) -> Result<models::notifications::DeleteDestinationResponse, Error<DeleteDestinationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_destination_id = destination_id;

    let uri_str = format!("{}/notifications/v1/destinations/{destinationId}", configuration.base_path, destinationId=crate::apis::urlencode(p_destination_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::notifications::DeleteDestinationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::notifications::DeleteDestinationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteDestinationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes the subscription indicated by the subscription identifier and notification type that you specify. The subscription identifier can be for any subscription associated with your application. After you successfully call this operation, notifications will stop being sent for the associated subscription. The `deleteSubscriptionById` operation is grantless. For more information, refer to [Grantless operations](https://developer-docs.amazon.com/sp-api/docs/grantless-operations).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn delete_subscription_by_id(configuration: &configuration::Configuration, subscription_id: &str, notification_type: &str) -> Result<models::notifications::DeleteSubscriptionByIdResponse, Error<DeleteSubscriptionByIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_subscription_id = subscription_id;
    let p_notification_type = notification_type;

    let uri_str = format!("{}/notifications/v1/subscriptions/{notificationType}/{subscriptionId}", configuration.base_path, subscriptionId=crate::apis::urlencode(p_subscription_id), notificationType=crate::apis::urlencode(p_notification_type));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::notifications::DeleteSubscriptionByIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::notifications::DeleteSubscriptionByIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSubscriptionByIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns information about the destination that you specify. The `getDestination` operation is grantless. For more information, refer to [Grantless operations](https://developer-docs.amazon.com/sp-api/docs/grantless-operations).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_destination(configuration: &configuration::Configuration, destination_id: &str) -> Result<models::notifications::GetDestinationResponse, Error<GetDestinationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_destination_id = destination_id;

    let uri_str = format!("{}/notifications/v1/destinations/{destinationId}", configuration.base_path, destinationId=crate::apis::urlencode(p_destination_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::notifications::GetDestinationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::notifications::GetDestinationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetDestinationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns information about all destinations. The `getDestinations` operation is grantless. For more information, refer to [Grantless operations](https://developer-docs.amazon.com/sp-api/docs/grantless-operations).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_destinations(configuration: &configuration::Configuration, ) -> Result<models::notifications::GetDestinationsResponse, Error<GetDestinationsError>> {

    let uri_str = format!("{}/notifications/v1/destinations", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::notifications::GetDestinationsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::notifications::GetDestinationsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetDestinationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns information about subscription of the specified notification type and payload version. `payloadVersion` is an optional parameter. When `payloadVersion` is not provided, it will return latest payload version subscription's information. You can use this API to get subscription information when you do not have a subscription identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_subscription(configuration: &configuration::Configuration, notification_type: &str, payload_version: Option<&str>) -> Result<models::notifications::GetSubscriptionResponse, Error<GetSubscriptionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_notification_type = notification_type;
    let p_payload_version = payload_version;

    let uri_str = format!("{}/notifications/v1/subscriptions/{notificationType}", configuration.base_path, notificationType=crate::apis::urlencode(p_notification_type));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_payload_version {
        req_builder = req_builder.query(&[("payloadVersion", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::notifications::GetSubscriptionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::notifications::GetSubscriptionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSubscriptionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns information about a subscription for the specified notification type. The `getSubscriptionById` operation is grantless. For more information, refer to [Grantless operations](https://developer-docs.amazon.com/sp-api/docs/grantless-operations).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_subscription_by_id(configuration: &configuration::Configuration, subscription_id: &str, notification_type: &str) -> Result<models::notifications::GetSubscriptionByIdResponse, Error<GetSubscriptionByIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_subscription_id = subscription_id;
    let p_notification_type = notification_type;

    let uri_str = format!("{}/notifications/v1/subscriptions/{notificationType}/{subscriptionId}", configuration.base_path, subscriptionId=crate::apis::urlencode(p_subscription_id), notificationType=crate::apis::urlencode(p_notification_type));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::notifications::GetSubscriptionByIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::notifications::GetSubscriptionByIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSubscriptionByIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

