/*
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`list_transactions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTransactionsError {
    Status400(models::finances_2024_06_19::ErrorList),
    Status403(models::finances_2024_06_19::ErrorList),
    Status404(models::finances_2024_06_19::ErrorList),
    Status415(models::finances_2024_06_19::ErrorList),
    Status413(models::finances_2024_06_19::ErrorList),
    Status429(models::finances_2024_06_19::ErrorList),
    Status500(models::finances_2024_06_19::ErrorList),
    Status503(models::finances_2024_06_19::ErrorList),
    UnknownValue(serde_json::Value),
}


/// Returns transactions for the given parameters. Financial events might not include orders from the last 48 hours.  **Usage plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
pub async fn list_transactions(configuration: &configuration::Configuration, posted_after: String, posted_before: Option<String>, marketplace_id: Option<&str>, transaction_status: Option<&str>, next_token: Option<&str>) -> Result<models::finances_2024_06_19::ListTransactionsResponse, Error<ListTransactionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_posted_after = posted_after;
    let p_posted_before = posted_before;
    let p_marketplace_id = marketplace_id;
    let p_transaction_status = transaction_status;
    let p_next_token = next_token;

    let uri_str = format!("{}/finances/2024-06-19/transactions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("postedAfter", &p_posted_after.to_string())]);
    if let Some(ref param_value) = p_posted_before {
        req_builder = req_builder.query(&[("postedBefore", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_marketplace_id {
        req_builder = req_builder.query(&[("marketplaceId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_transaction_status {
        req_builder = req_builder.query(&[("transactionStatus", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_next_token {
        req_builder = req_builder.query(&[("nextToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::finances_2024_06_19::ListTransactionsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::finances_2024_06_19::ListTransactionsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTransactionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

