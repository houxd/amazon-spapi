/*
 * Selling Partner API for Product Type Definitions
 *
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).
 *
 * The version of the OpenAPI document: 2020-09-01
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_definitions_product_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDefinitionsProductTypeError {
    Status400(models::definitions_product_types_2020_09_01::ErrorList),
    Status403(models::definitions_product_types_2020_09_01::ErrorList),
    Status404(models::definitions_product_types_2020_09_01::ErrorList),
    Status413(models::definitions_product_types_2020_09_01::ErrorList),
    Status415(models::definitions_product_types_2020_09_01::ErrorList),
    Status429(models::definitions_product_types_2020_09_01::ErrorList),
    Status500(models::definitions_product_types_2020_09_01::ErrorList),
    Status503(models::definitions_product_types_2020_09_01::ErrorList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_definitions_product_types`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchDefinitionsProductTypesError {
    Status400(models::definitions_product_types_2020_09_01::ErrorList),
    Status403(models::definitions_product_types_2020_09_01::ErrorList),
    Status404(models::definitions_product_types_2020_09_01::ErrorList),
    Status413(models::definitions_product_types_2020_09_01::ErrorList),
    Status415(models::definitions_product_types_2020_09_01::ErrorList),
    Status429(models::definitions_product_types_2020_09_01::ErrorList),
    Status500(models::definitions_product_types_2020_09_01::ErrorList),
    Status503(models::definitions_product_types_2020_09_01::ErrorList),
    UnknownValue(serde_json::Value),
}


/// Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_definitions_product_type(configuration: &configuration::Configuration, product_type: &str, marketplace_ids: Vec<String>, seller_id: Option<&str>, product_type_version: Option<&str>, requirements: Option<&str>, requirements_enforced: Option<&str>, locale: Option<&str>) -> Result<models::definitions_product_types_2020_09_01::ProductTypeDefinition, Error<GetDefinitionsProductTypeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_product_type = product_type;
    let p_marketplace_ids = marketplace_ids;
    let p_seller_id = seller_id;
    let p_product_type_version = product_type_version;
    let p_requirements = requirements;
    let p_requirements_enforced = requirements_enforced;
    let p_locale = locale;

    let uri_str = format!("{}/definitions/2020-09-01/productTypes/{productType}", configuration.base_path, productType=crate::apis::urlencode(p_product_type));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_seller_id {
        req_builder = req_builder.query(&[("sellerId", &param_value.to_string())]);
    }
    req_builder = match "csv" {
        "multi" => req_builder.query(&p_marketplace_ids.into_iter().map(|p| ("marketplaceIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("marketplaceIds", &p_marketplace_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_product_type_version {
        req_builder = req_builder.query(&[("productTypeVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_requirements {
        req_builder = req_builder.query(&[("requirements", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_requirements_enforced {
        req_builder = req_builder.query(&[("requirementsEnforced", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_locale {
        req_builder = req_builder.query(&[("locale", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::definitions_product_types_2020_09_01::ProductTypeDefinition`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::definitions_product_types_2020_09_01::ProductTypeDefinition`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetDefinitionsProductTypeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn search_definitions_product_types(configuration: &configuration::Configuration, marketplace_ids: Vec<String>, keywords: Option<Vec<String>>, item_name: Option<&str>, locale: Option<&str>, search_locale: Option<&str>) -> Result<models::definitions_product_types_2020_09_01::ProductTypeList, Error<SearchDefinitionsProductTypesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_marketplace_ids = marketplace_ids;
    let p_keywords = keywords;
    let p_item_name = item_name;
    let p_locale = locale;
    let p_search_locale = search_locale;

    let uri_str = format!("{}/definitions/2020-09-01/productTypes", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_keywords {
        req_builder = match "csv" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("keywords".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("keywords", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    req_builder = match "csv" {
        "multi" => req_builder.query(&p_marketplace_ids.into_iter().map(|p| ("marketplaceIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("marketplaceIds", &p_marketplace_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_item_name {
        req_builder = req_builder.query(&[("itemName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_locale {
        req_builder = req_builder.query(&[("locale", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_search_locale {
        req_builder = req_builder.query(&[("searchLocale", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::definitions_product_types_2020_09_01::ProductTypeList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::definitions_product_types_2020_09_01::ProductTypeList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchDefinitionsProductTypesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

