/*
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_invoice_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInvoiceStatusError {
    Status400(models::shipment_invoicing_v0::GetInvoiceStatusResponse),
    Status401(models::shipment_invoicing_v0::GetInvoiceStatusResponse),
    Status403(models::shipment_invoicing_v0::GetInvoiceStatusResponse),
    Status404(models::shipment_invoicing_v0::GetInvoiceStatusResponse),
    Status415(models::shipment_invoicing_v0::GetInvoiceStatusResponse),
    Status429(models::shipment_invoicing_v0::GetInvoiceStatusResponse),
    Status500(models::shipment_invoicing_v0::GetInvoiceStatusResponse),
    Status503(models::shipment_invoicing_v0::GetInvoiceStatusResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_shipment_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShipmentDetailsError {
    Status400(models::shipment_invoicing_v0::GetShipmentDetailsResponse),
    Status401(models::shipment_invoicing_v0::GetShipmentDetailsResponse),
    Status403(models::shipment_invoicing_v0::GetShipmentDetailsResponse),
    Status404(models::shipment_invoicing_v0::GetShipmentDetailsResponse),
    Status415(models::shipment_invoicing_v0::GetShipmentDetailsResponse),
    Status429(models::shipment_invoicing_v0::GetShipmentDetailsResponse),
    Status500(models::shipment_invoicing_v0::GetShipmentDetailsResponse),
    Status503(models::shipment_invoicing_v0::GetShipmentDetailsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`submit_invoice`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitInvoiceError {
    Status400(models::shipment_invoicing_v0::SubmitInvoiceResponse),
    Status401(models::shipment_invoicing_v0::SubmitInvoiceResponse),
    Status403(models::shipment_invoicing_v0::SubmitInvoiceResponse),
    Status404(models::shipment_invoicing_v0::SubmitInvoiceResponse),
    Status415(models::shipment_invoicing_v0::SubmitInvoiceResponse),
    Status429(models::shipment_invoicing_v0::SubmitInvoiceResponse),
    Status500(models::shipment_invoicing_v0::SubmitInvoiceResponse),
    Status503(models::shipment_invoicing_v0::SubmitInvoiceResponse),
    UnknownValue(serde_json::Value),
}


/// Returns the invoice status for the shipment you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1.133 | 25 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_invoice_status(configuration: &configuration::Configuration, shipment_id: &str) -> Result<models::shipment_invoicing_v0::GetInvoiceStatusResponse, Error<GetInvoiceStatusError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_shipment_id = shipment_id;

    let uri_str = format!("{}/fba/outbound/brazil/v0/shipments/{shipmentId}/invoice/status", configuration.base_path, shipmentId=crate::apis::urlencode(p_shipment_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::shipment_invoicing_v0::GetInvoiceStatusResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::shipment_invoicing_v0::GetInvoiceStatusResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetInvoiceStatusError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns the shipment details required to issue an invoice for the specified shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1.133 | 25 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_shipment_details(configuration: &configuration::Configuration, shipment_id: &str) -> Result<models::shipment_invoicing_v0::GetShipmentDetailsResponse, Error<GetShipmentDetailsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_shipment_id = shipment_id;

    let uri_str = format!("{}/fba/outbound/brazil/v0/shipments/{shipmentId}", configuration.base_path, shipmentId=crate::apis::urlencode(p_shipment_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::shipment_invoicing_v0::GetShipmentDetailsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::shipment_invoicing_v0::GetShipmentDetailsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetShipmentDetailsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Submits a shipment invoice document for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1.133 | 25 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn submit_invoice(configuration: &configuration::Configuration, shipment_id: &str, body: models::shipment_invoicing_v0::SubmitInvoiceRequest) -> Result<models::shipment_invoicing_v0::SubmitInvoiceResponse, Error<SubmitInvoiceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_shipment_id = shipment_id;
    let p_body = body;

    let uri_str = format!("{}/fba/outbound/brazil/v0/shipments/{shipmentId}/invoice", configuration.base_path, shipmentId=crate::apis::urlencode(p_shipment_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::shipment_invoicing_v0::SubmitInvoiceResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::shipment_invoicing_v0::SubmitInvoiceResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SubmitInvoiceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

