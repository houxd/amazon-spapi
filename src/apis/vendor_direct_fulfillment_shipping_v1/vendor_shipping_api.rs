/*
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_packing_slip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPackingSlipError {
    Status400(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse),
    Status401(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse),
    Status403(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse),
    Status404(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse),
    Status415(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse),
    Status429(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse),
    Status500(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse),
    Status503(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_packing_slips`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPackingSlipsError {
    Status400(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse),
    Status401(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse),
    Status403(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse),
    Status404(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse),
    Status415(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse),
    Status429(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse),
    Status500(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse),
    Status503(models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`submit_shipment_confirmations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitShipmentConfirmationsError {
    Status400(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse),
    Status403(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse),
    Status404(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse),
    Status413(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse),
    Status415(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse),
    Status429(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse),
    Status500(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse),
    Status503(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`submit_shipment_status_updates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitShipmentStatusUpdatesError {
    Status400(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse),
    Status403(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse),
    Status404(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse),
    Status413(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse),
    Status415(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse),
    Status429(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse),
    Status500(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse),
    Status503(models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse),
    UnknownValue(serde_json::Value),
}


/// Returns a packing slip based on the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_packing_slip(configuration: &configuration::Configuration, purchase_order_number: &str) -> Result<models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse, Error<GetPackingSlipError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_purchase_order_number = purchase_order_number;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/v1/packingSlips/{purchaseOrderNumber}", configuration.base_path, purchaseOrderNumber=crate::apis::urlencode(p_purchase_order_number));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetPackingSlipError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of packing slips for the purchase orders that match the criteria specified. Date range to search must not be more than 7 days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_packing_slips(configuration: &configuration::Configuration, created_after: String, created_before: String, ship_from_party_id: Option<&str>, limit: Option<i32>, sort_order: Option<&str>, next_token: Option<&str>) -> Result<models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse, Error<GetPackingSlipsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_created_after = created_after;
    let p_created_before = created_before;
    let p_ship_from_party_id = ship_from_party_id;
    let p_limit = limit;
    let p_sort_order = sort_order;
    let p_next_token = next_token;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/v1/packingSlips", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_ship_from_party_id {
        req_builder = req_builder.query(&[("shipFromPartyId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("createdAfter", &p_created_after.to_string())]);
    req_builder = req_builder.query(&[("createdBefore", &p_created_before.to_string())]);
    if let Some(ref param_value) = p_sort_order {
        req_builder = req_builder.query(&[("sortOrder", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_next_token {
        req_builder = req_builder.query(&[("nextToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::GetPackingSlipListResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetPackingSlipsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn submit_shipment_confirmations(configuration: &configuration::Configuration, body: models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsRequest) -> Result<models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse, Error<SubmitShipmentConfirmationsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/v1/shipmentConfirmations", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentConfirmationsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SubmitShipmentConfirmationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This API call is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this API will submit a shipment status update for the package that a vendor has shipped. It will provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn submit_shipment_status_updates(configuration: &configuration::Configuration, body: models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesRequest) -> Result<models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse, Error<SubmitShipmentStatusUpdatesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/v1/shipmentStatusUpdates", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::SubmitShipmentStatusUpdatesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SubmitShipmentStatusUpdatesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

