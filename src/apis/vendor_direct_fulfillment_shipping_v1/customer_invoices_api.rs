/*
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_customer_invoice`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomerInvoiceError {
    Status400(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status401(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status403(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status404(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status415(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status429(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status500(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status503(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_customer_invoices`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomerInvoicesError {
    Status400(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status403(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status404(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status415(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status429(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status500(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    Status503(models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse),
    UnknownValue(serde_json::Value),
}


/// Returns a customer invoice based on the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_customer_invoice(configuration: &configuration::Configuration, purchase_order_number: &str) -> Result<models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse, Error<GetCustomerInvoiceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_purchase_order_number = purchase_order_number;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/v1/customerInvoices/{purchaseOrderNumber}", configuration.base_path, purchaseOrderNumber=crate::apis::urlencode(p_purchase_order_number));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoiceResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCustomerInvoiceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of customer invoices created during a time frame that you specify. You define the  time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must be no more than 7 days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_customer_invoices(configuration: &configuration::Configuration, created_after: String, created_before: String, ship_from_party_id: Option<&str>, limit: Option<i32>, sort_order: Option<&str>, next_token: Option<&str>) -> Result<models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoicesResponse, Error<GetCustomerInvoicesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_created_after = created_after;
    let p_created_before = created_before;
    let p_ship_from_party_id = ship_from_party_id;
    let p_limit = limit;
    let p_sort_order = sort_order;
    let p_next_token = next_token;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/v1/customerInvoices", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_ship_from_party_id {
        req_builder = req_builder.query(&[("shipFromPartyId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("createdAfter", &p_created_after.to_string())]);
    req_builder = req_builder.query(&[("createdBefore", &p_created_before.to_string())]);
    if let Some(ref param_value) = p_sort_order {
        req_builder = req_builder.query(&[("sortOrder", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_next_token {
        req_builder = req_builder.query(&[("nextToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoicesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_v1::GetCustomerInvoicesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCustomerInvoicesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

