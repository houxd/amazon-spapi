/*
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for typed errors of method [`get_selling_partner_metrics`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSellingPartnerMetricsError {
    Status400(models::replenishment_2022_11_07::ErrorList),
    Status401(models::replenishment_2022_11_07::ErrorList),
    Status403(models::replenishment_2022_11_07::ErrorList),
    Status404(models::replenishment_2022_11_07::ErrorList),
    Status413(models::replenishment_2022_11_07::ErrorList),
    Status415(models::replenishment_2022_11_07::ErrorList),
    Status429(models::replenishment_2022_11_07::ErrorList),
    Status500(models::replenishment_2022_11_07::ErrorList),
    Status503(models::replenishment_2022_11_07::ErrorList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_offer_metrics`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOfferMetricsError {
    Status400(models::replenishment_2022_11_07::ErrorList),
    Status401(models::replenishment_2022_11_07::ErrorList),
    Status403(models::replenishment_2022_11_07::ErrorList),
    Status404(models::replenishment_2022_11_07::ErrorList),
    Status413(models::replenishment_2022_11_07::ErrorList),
    Status415(models::replenishment_2022_11_07::ErrorList),
    Status429(models::replenishment_2022_11_07::ErrorList),
    Status500(models::replenishment_2022_11_07::ErrorList),
    Status503(models::replenishment_2022_11_07::ErrorList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_offers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOffersError {
    Status400(models::replenishment_2022_11_07::ErrorList),
    Status401(models::replenishment_2022_11_07::ErrorList),
    Status403(models::replenishment_2022_11_07::ErrorList),
    Status404(models::replenishment_2022_11_07::ErrorList),
    Status413(models::replenishment_2022_11_07::ErrorList),
    Status415(models::replenishment_2022_11_07::ErrorList),
    Status429(models::replenishment_2022_11_07::ErrorList),
    Status500(models::replenishment_2022_11_07::ErrorList),
    Status503(models::replenishment_2022_11_07::ErrorList),
    UnknownValue(serde_json::Value),
}


/// Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_selling_partner_metrics(configuration: &configuration::Configuration, body: Option<models::replenishment_2022_11_07::GetSellingPartnerMetricsRequest>) -> Result<models::replenishment_2022_11_07::GetSellingPartnerMetricsResponse, Error<GetSellingPartnerMetricsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/replenishment/2022-11-07/sellingPartners/metrics/search", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::replenishment_2022_11_07::GetSellingPartnerMetricsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::replenishment_2022_11_07::GetSellingPartnerMetricsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSellingPartnerMetricsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns aggregated replenishment program metrics for a selling partner's offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn list_offer_metrics(configuration: &configuration::Configuration, body: Option<models::replenishment_2022_11_07::ListOfferMetricsRequest>) -> Result<models::replenishment_2022_11_07::ListOfferMetricsResponse, Error<ListOfferMetricsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/replenishment/2022-11-07/offers/metrics/search", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::replenishment_2022_11_07::ListOfferMetricsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::replenishment_2022_11_07::ListOfferMetricsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListOfferMetricsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns the details of a selling partner's replenishment program offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn list_offers(configuration: &configuration::Configuration, body: Option<models::replenishment_2022_11_07::ListOffersRequest>) -> Result<models::replenishment_2022_11_07::ListOffersResponse, Error<ListOffersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/replenishment/2022-11-07/offers/search", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::replenishment_2022_11_07::ListOffersResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::replenishment_2022_11_07::ListOffersResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListOffersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

