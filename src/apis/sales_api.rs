/*
 * Selling Partner API for Sales
 *
 * The Selling Partner API for Sales provides APIs related to sales performance.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_order_metrics`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrderMetricsError {
    Status400(models::sales::GetOrderMetricsResponse),
    Status403(models::sales::GetOrderMetricsResponse),
    Status404(models::sales::GetOrderMetricsResponse),
    Status413(models::sales::GetOrderMetricsResponse),
    Status415(models::sales::GetOrderMetricsResponse),
    Status429(models::sales::GetOrderMetricsResponse),
    Status500(models::sales::GetOrderMetricsResponse),
    Status503(models::sales::GetOrderMetricsResponse),
    UnknownValue(serde_json::Value),
}


/// Returns aggregated order metrics for given interval, broken down by granularity, for given buyer type.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_order_metrics(configuration: &configuration::Configuration, marketplace_ids: Vec<String>, interval: &str, granularity: &str, granularity_time_zone: Option<&str>, buyer_type: Option<&str>, fulfillment_network: Option<&str>, first_day_of_week: Option<&str>, asin: Option<&str>, sku: Option<&str>, amazon_program: Option<&str>) -> Result<models::sales::GetOrderMetricsResponse, Error<GetOrderMetricsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_marketplace_ids = marketplace_ids;
    let p_interval = interval;
    let p_granularity = granularity;
    let p_granularity_time_zone = granularity_time_zone;
    let p_buyer_type = buyer_type;
    let p_fulfillment_network = fulfillment_network;
    let p_first_day_of_week = first_day_of_week;
    let p_asin = asin;
    let p_sku = sku;
    let p_amazon_program = amazon_program;

    let uri_str = format!("{}/sales/v1/orderMetrics", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&p_marketplace_ids.into_iter().map(|p| ("marketplaceIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("marketplaceIds", &p_marketplace_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    req_builder = req_builder.query(&[("interval", &p_interval.to_string())]);
    if let Some(ref param_value) = p_granularity_time_zone {
        req_builder = req_builder.query(&[("granularityTimeZone", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("granularity", &p_granularity.to_string())]);
    if let Some(ref param_value) = p_buyer_type {
        req_builder = req_builder.query(&[("buyerType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_fulfillment_network {
        req_builder = req_builder.query(&[("fulfillmentNetwork", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_first_day_of_week {
        req_builder = req_builder.query(&[("firstDayOfWeek", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_asin {
        req_builder = req_builder.query(&[("asin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sku {
        req_builder = req_builder.query(&[("sku", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_amazon_program {
        req_builder = req_builder.query(&[("amazonProgram", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::sales::GetOrderMetricsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::sales::GetOrderMetricsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetOrderMetricsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

