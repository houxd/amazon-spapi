/*
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_shipping_labels`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateShippingLabelsError {
    Status400(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status403(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status404(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status409(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status413(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status415(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status429(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status500(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status503(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_shipping_label`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShippingLabelError {
    Status400(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status401(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status403(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status404(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status415(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status429(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status500(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status503(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_shipping_labels`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShippingLabelsError {
    Status400(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status403(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status404(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status415(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status429(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status500(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status503(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`submit_shipping_label_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitShippingLabelRequestError {
    Status400(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status403(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status404(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status413(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status415(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status429(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status500(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status503(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    UnknownValue(serde_json::Value),
}


/// Creates shipping labels for a purchase order and returns the labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
pub async fn create_shipping_labels(configuration: &configuration::Configuration, purchase_order_number: &str, body: models::vendor_direct_fulfillment_shipping_2021_12_28::CreateShippingLabelsRequest) -> Result<models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabel, Error<CreateShippingLabelsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_purchase_order_number = purchase_order_number;
    let p_body = body;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}", configuration.base_path, purchaseOrderNumber=crate::apis::urlencode(p_purchase_order_number));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateShippingLabelsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a shipping label for the `purchaseOrderNumber` that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
pub async fn get_shipping_label(configuration: &configuration::Configuration, purchase_order_number: &str) -> Result<models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabel, Error<GetShippingLabelError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_purchase_order_number = purchase_order_number;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}", configuration.base_path, purchaseOrderNumber=crate::apis::urlencode(p_purchase_order_number));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetShippingLabelError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of shipping labels created during the time frame that you specify. Use the `createdAfter` and `createdBefore` parameters to define the time frame. You must use both of these parameters. The date range to search must not be more than seven days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
pub async fn get_shipping_labels(configuration: &configuration::Configuration, created_after: String, created_before: String, ship_from_party_id: Option<&str>, limit: Option<i32>, sort_order: Option<&str>, next_token: Option<&str>) -> Result<models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabelList, Error<GetShippingLabelsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_created_after = created_after;
    let p_created_before = created_before;
    let p_ship_from_party_id = ship_from_party_id;
    let p_limit = limit;
    let p_sort_order = sort_order;
    let p_next_token = next_token;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/2021-12-28/shippingLabels", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_ship_from_party_id {
        req_builder = req_builder.query(&[("shipFromPartyId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("createdAfter", &p_created_after.to_string())]);
    req_builder = req_builder.query(&[("createdBefore", &p_created_before.to_string())]);
    if let Some(ref param_value) = p_sort_order {
        req_builder = req_builder.query(&[("sortOrder", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_next_token {
        req_builder = req_builder.query(&[("nextToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabelList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::ShippingLabelList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetShippingLabelsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a shipping label for a purchase order and returns a `transactionId` for reference.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
pub async fn submit_shipping_label_request(configuration: &configuration::Configuration, body: models::vendor_direct_fulfillment_shipping_2021_12_28::SubmitShippingLabelsRequest) -> Result<models::vendor_direct_fulfillment_shipping_2021_12_28::TransactionReference, Error<SubmitShippingLabelRequestError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/2021-12-28/shippingLabels", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::TransactionReference`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::TransactionReference`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SubmitShippingLabelRequestError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

