/*
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_container_label`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateContainerLabelError {
    Status400(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status403(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status404(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status413(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status415(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status429(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status500(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    Status503(models::vendor_direct_fulfillment_shipping_2021_12_28::ErrorList),
    UnknownValue(serde_json::Value),
}


/// Creates a container (pallet) label for the associated shipment package.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
pub async fn create_container_label(configuration: &configuration::Configuration, body: models::vendor_direct_fulfillment_shipping_2021_12_28::CreateContainerLabelRequest) -> Result<models::vendor_direct_fulfillment_shipping_2021_12_28::CreateContainerLabelResponse, Error<CreateContainerLabelError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/vendor/directFulfillment/shipping/2021-12-28/containerLabel", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::CreateContainerLabelResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::vendor_direct_fulfillment_shipping_2021_12_28::CreateContainerLabelResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateContainerLabelError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

