/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RetrochargeEvent : A retrocharge or retrocharge reversal.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetrochargeEvent {
    /// The type of event.  Possible values:  * Retrocharge  * RetrochargeReversal
    #[serde(rename = "RetrochargeEventType", skip_serializing_if = "Option::is_none")]
    pub retrocharge_event_type: Option<String>,
    /// An Amazon-defined identifier for an order.
    #[serde(rename = "AmazonOrderId", skip_serializing_if = "Option::is_none")]
    pub amazon_order_id: Option<String>,
    /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
    #[serde(rename = "PostedDate", skip_serializing_if = "Option::is_none")]
    pub posted_date: Option<String>,
    #[serde(rename = "BaseTax", skip_serializing_if = "Option::is_none")]
    pub base_tax: Option<Box<models::finances_v0::Currency>>,
    #[serde(rename = "ShippingTax", skip_serializing_if = "Option::is_none")]
    pub shipping_tax: Option<Box<models::finances_v0::Currency>>,
    /// The name of the marketplace where the retrocharge event occurred.
    #[serde(rename = "MarketplaceName", skip_serializing_if = "Option::is_none")]
    pub marketplace_name: Option<String>,
    /// A list of information about taxes withheld.
    #[serde(rename = "RetrochargeTaxWithheldList", skip_serializing_if = "Option::is_none")]
    pub retrocharge_tax_withheld_list: Option<Vec<models::finances_v0::TaxWithheldComponent>>,
}

impl RetrochargeEvent {
    /// A retrocharge or retrocharge reversal.
    pub fn new() -> RetrochargeEvent {
        RetrochargeEvent {
            retrocharge_event_type: None,
            amazon_order_id: None,
            posted_date: None,
            base_tax: None,
            shipping_tax: None,
            marketplace_name: None,
            retrocharge_tax_withheld_list: None,
        }
    }
}

