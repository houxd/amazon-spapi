/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AffordabilityExpenseEvent : An expense related to an affordability promotion.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AffordabilityExpenseEvent {
    /// An Amazon-defined identifier for an order.
    #[serde(rename = "AmazonOrderId", skip_serializing_if = "Option::is_none")]
    pub amazon_order_id: Option<String>,
    /// Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).
    #[serde(rename = "PostedDate", skip_serializing_if = "Option::is_none")]
    pub posted_date: Option<String>,
    /// An encrypted, Amazon-defined marketplace identifier.
    #[serde(rename = "MarketplaceId", skip_serializing_if = "Option::is_none")]
    pub marketplace_id: Option<String>,
    /// Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.
    #[serde(rename = "TransactionType", skip_serializing_if = "Option::is_none")]
    pub transaction_type: Option<String>,
    #[serde(rename = "BaseExpense", skip_serializing_if = "Option::is_none")]
    pub base_expense: Option<Box<models::finances_v0::Currency>>,
    #[serde(rename = "TaxTypeCGST")]
    pub tax_type_cgst: Box<models::finances_v0::Currency>,
    #[serde(rename = "TaxTypeSGST")]
    pub tax_type_sgst: Box<models::finances_v0::Currency>,
    #[serde(rename = "TaxTypeIGST")]
    pub tax_type_igst: Box<models::finances_v0::Currency>,
    #[serde(rename = "TotalExpense", skip_serializing_if = "Option::is_none")]
    pub total_expense: Option<Box<models::finances_v0::Currency>>,
}

impl AffordabilityExpenseEvent {
    /// An expense related to an affordability promotion.
    pub fn new(tax_type_cgst: models::finances_v0::Currency, tax_type_sgst: models::finances_v0::Currency, tax_type_igst: models::finances_v0::Currency) -> AffordabilityExpenseEvent {
        AffordabilityExpenseEvent {
            amazon_order_id: None,
            posted_date: None,
            marketplace_id: None,
            transaction_type: None,
            base_expense: None,
            tax_type_cgst: Box::new(tax_type_cgst),
            tax_type_sgst: Box::new(tax_type_sgst),
            tax_type_igst: Box::new(tax_type_igst),
            total_expense: None,
        }
    }
}

