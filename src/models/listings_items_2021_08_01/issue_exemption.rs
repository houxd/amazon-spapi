/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IssueExemption : Conveying the status of the listed enforcement actions and, if applicable, provides information about the exemption's expiry date.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueExemption {
    /// This field indicates the current exemption status for the listed enforcement actions. It can take values such as `EXEMPT`, signifying permanent exemption, `EXEMPT_UNTIL_EXPIRY_DATE` indicating temporary exemption until a specified date, or `NOT_EXEMPT` signifying no exemptions, and enforcement actions were already applied.
    #[serde(rename = "status")]
    pub status: Status,
    /// Represents the timestamp, in ISO 8601 format, that specifies the date when the temporary exemptions expires, and Amazon begins enforcing the listed actions.
    #[serde(rename = "expiryDate", skip_serializing_if = "Option::is_none")]
    pub expiry_date: Option<String>,
}

impl IssueExemption {
    /// Conveying the status of the listed enforcement actions and, if applicable, provides information about the exemption's expiry date.
    pub fn new(status: Status) -> IssueExemption {
        IssueExemption {
            status,
            expiry_date: None,
        }
    }
}
/// This field indicates the current exemption status for the listed enforcement actions. It can take values such as `EXEMPT`, signifying permanent exemption, `EXEMPT_UNTIL_EXPIRY_DATE` indicating temporary exemption until a specified date, or `NOT_EXEMPT` signifying no exemptions, and enforcement actions were already applied.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "EXEMPT")]
    Exempt,
    #[serde(rename = "EXEMPT_UNTIL_EXPIRY_DATE")]
    ExemptUntilExpiryDate,
    #[serde(rename = "NOT_EXEMPT")]
    NotExempt,
}

impl Default for Status {
    fn default() -> Status {
        Self::Exempt
    }
}

