/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ItemRelationship : The relationship details for a listing item.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItemRelationship {
    /// Identifiers (SKUs) of the related items that are children of this listing item.
    #[serde(rename = "childSkus", skip_serializing_if = "Option::is_none")]
    pub child_skus: Option<Vec<String>>,
    /// Identifiers (SKUs) of the related items that are parents of this listing item.
    #[serde(rename = "parentSkus", skip_serializing_if = "Option::is_none")]
    pub parent_skus: Option<Vec<String>>,
    #[serde(rename = "variationTheme", skip_serializing_if = "Option::is_none")]
    pub variation_theme: Option<Box<models::listings_items_2021_08_01::ItemVariationTheme>>,
    /// The type of relationship.
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl ItemRelationship {
    /// The relationship details for a listing item.
    pub fn new(r#type: Type) -> ItemRelationship {
        ItemRelationship {
            child_skus: None,
            parent_skus: None,
            variation_theme: None,
            r#type,
        }
    }
}
/// The type of relationship.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "VARIATION")]
    Variation,
    #[serde(rename = "PACKAGE_HIERARCHY")]
    PackageHierarchy,
}

impl Default for Type {
    fn default() -> Type {
        Self::Variation
    }
}

