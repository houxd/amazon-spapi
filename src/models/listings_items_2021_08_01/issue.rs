/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Issue : An issue with a listings item.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Issue {
    /// An issue code that identifies the type of issue.
    #[serde(rename = "code")]
    pub code: String,
    /// A message that describes the issue.
    #[serde(rename = "message")]
    pub message: String,
    /// The severity of the issue.
    #[serde(rename = "severity")]
    pub severity: Severity,
    /// The names of the attributes associated with the issue, if applicable.
    #[serde(rename = "attributeNames", skip_serializing_if = "Option::is_none")]
    pub attribute_names: Option<Vec<String>>,
    /// List of issue categories.   Possible values:   * 'INVALID_ATTRIBUTE' - Indicating an invalid attribute in the listing.   * 'MISSING_ATTRIBUTE' - Highlighting a missing attribute in the listing.   * 'INVALID_IMAGE' - Signifying an invalid image in the listing.   * 'MISSING_IMAGE' - Noting the absence of an image in the listing.   * 'INVALID_PRICE' - Pertaining to issues with the listing's price-related attributes.   * 'MISSING_PRICE' - Pointing out the absence of a price attribute in the listing.   * 'DUPLICATE' - Identifying listings with potential duplicate problems, such as this ASIN potentially being a duplicate of another ASIN.   * 'QUALIFICATION_REQUIRED' - Indicating that the listing requires qualification-related approval.
    #[serde(rename = "categories")]
    pub categories: Vec<String>,
    #[serde(rename = "enforcements", skip_serializing_if = "Option::is_none")]
    pub enforcements: Option<Box<models::listings_items_2021_08_01::IssueEnforcements>>,
}

impl Issue {
    /// An issue with a listings item.
    pub fn new(code: String, message: String, severity: Severity, categories: Vec<String>) -> Issue {
        Issue {
            code,
            message,
            severity,
            attribute_names: None,
            categories,
            enforcements: None,
        }
    }
}
/// The severity of the issue.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "WARNING")]
    Warning,
    #[serde(rename = "INFO")]
    Info,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::Error
    }
}

