/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ShipmentStatus : Indicates the status of the inbound shipment. When used with the createInboundShipment operation, WORKING is the only valid value. When used with the updateInboundShipment operation, possible values are WORKING, SHIPPED or CANCELLED.
/// Indicates the status of the inbound shipment. When used with the createInboundShipment operation, WORKING is the only valid value. When used with the updateInboundShipment operation, possible values are WORKING, SHIPPED or CANCELLED.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ShipmentStatus {
    #[serde(rename = "WORKING")]
    Working,
    #[serde(rename = "SHIPPED")]
    Shipped,
    #[serde(rename = "RECEIVING")]
    Receiving,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "DELETED")]
    Deleted,
    #[serde(rename = "CLOSED")]
    Closed,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "IN_TRANSIT")]
    InTransit,
    #[serde(rename = "DELIVERED")]
    Delivered,
    #[serde(rename = "CHECKED_IN")]
    CheckedIn,

}

impl std::fmt::Display for ShipmentStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Working => write!(f, "WORKING"),
            Self::Shipped => write!(f, "SHIPPED"),
            Self::Receiving => write!(f, "RECEIVING"),
            Self::Cancelled => write!(f, "CANCELLED"),
            Self::Deleted => write!(f, "DELETED"),
            Self::Closed => write!(f, "CLOSED"),
            Self::Error => write!(f, "ERROR"),
            Self::InTransit => write!(f, "IN_TRANSIT"),
            Self::Delivered => write!(f, "DELIVERED"),
            Self::CheckedIn => write!(f, "CHECKED_IN"),
        }
    }
}

impl Default for ShipmentStatus {
    fn default() -> ShipmentStatus {
        Self::Working
    }
}

