/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PrepCategory : The preparation category for shipping an item to Amazon's fulfillment network.
/// The preparation category for shipping an item to Amazon's fulfillment network.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PrepCategory {
    #[serde(rename = "ADULT")]
    Adult,
    #[serde(rename = "BABY")]
    Baby,
    #[serde(rename = "FC_PROVIDED")]
    FcProvided,
    #[serde(rename = "FRAGILE")]
    Fragile,
    #[serde(rename = "GRANULAR")]
    Granular,
    #[serde(rename = "HANGER")]
    Hanger,
    #[serde(rename = "LIQUID")]
    Liquid,
    #[serde(rename = "PERFORATED")]
    Perforated,
    #[serde(rename = "SET")]
    Set,
    #[serde(rename = "SHARP")]
    Sharp,
    #[serde(rename = "SMALL")]
    Small,
    #[serde(rename = "TEXTILE")]
    Textile,
    #[serde(rename = "NO_PREP")]
    NoPrep,
    #[serde(rename = "UNKNOWN")]
    Unknown,

}

impl std::fmt::Display for PrepCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Adult => write!(f, "ADULT"),
            Self::Baby => write!(f, "BABY"),
            Self::FcProvided => write!(f, "FC_PROVIDED"),
            Self::Fragile => write!(f, "FRAGILE"),
            Self::Granular => write!(f, "GRANULAR"),
            Self::Hanger => write!(f, "HANGER"),
            Self::Liquid => write!(f, "LIQUID"),
            Self::Perforated => write!(f, "PERFORATED"),
            Self::Set => write!(f, "SET"),
            Self::Sharp => write!(f, "SHARP"),
            Self::Small => write!(f, "SMALL"),
            Self::Textile => write!(f, "TEXTILE"),
            Self::NoPrep => write!(f, "NO_PREP"),
            Self::Unknown => write!(f, "UNKNOWN"),
        }
    }
}

impl Default for PrepCategory {
    fn default() -> PrepCategory {
        Self::Adult
    }
}

