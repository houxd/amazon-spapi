/*
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ItemSummaryByMarketplace : Information about an Amazon catalog item for the indicated `marketplaceId`.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItemSummaryByMarketplace {
    /// Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    #[serde(rename = "marketplaceId")]
    pub marketplace_id: String,
    /// When `true`, the Amazon catalog item is intended for an adult audience or is sexual in nature.
    #[serde(rename = "adultProduct", skip_serializing_if = "Option::is_none")]
    pub adult_product: Option<bool>,
    /// When `true`, the Amazon catalog item is autographed.
    #[serde(rename = "autographed", skip_serializing_if = "Option::is_none")]
    pub autographed: Option<bool>,
    /// Name of the brand that is associated with the Amazon catalog item.
    #[serde(rename = "brand", skip_serializing_if = "Option::is_none")]
    pub brand: Option<String>,
    #[serde(rename = "browseClassification", skip_serializing_if = "Option::is_none")]
    pub browse_classification: Option<Box<models::catalog_items_2022_04_01::ItemBrowseClassification>>,
    /// The color that is associated with the Amazon catalog item.
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    /// Individual contributors to the creation of the item, such as the authors or actors.
    #[serde(rename = "contributors", skip_serializing_if = "Option::is_none")]
    pub contributors: Option<Vec<models::catalog_items_2022_04_01::ItemContributor>>,
    /// Classification type that is associated with the Amazon catalog item.
    #[serde(rename = "itemClassification", skip_serializing_if = "Option::is_none")]
    pub item_classification: Option<ItemClassification>,
    /// The name that is associated with the Amazon catalog item.
    #[serde(rename = "itemName", skip_serializing_if = "Option::is_none")]
    pub item_name: Option<String>,
    /// The name of the manufacturer that is associated with the Amazon catalog item.
    #[serde(rename = "manufacturer", skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>,
    /// When true, the item is classified as memorabilia.
    #[serde(rename = "memorabilia", skip_serializing_if = "Option::is_none")]
    pub memorabilia: Option<bool>,
    /// The model number that is associated with the Amazon catalog item.
    #[serde(rename = "modelNumber", skip_serializing_if = "Option::is_none")]
    pub model_number: Option<String>,
    /// The quantity of the Amazon catalog item within one package.
    #[serde(rename = "packageQuantity", skip_serializing_if = "Option::is_none")]
    pub package_quantity: Option<i32>,
    /// The part number that is associated with the Amazon catalog item.
    #[serde(rename = "partNumber", skip_serializing_if = "Option::is_none")]
    pub part_number: Option<String>,
    /// The earliest date on which the Amazon catalog item can be shipped to customers.
    #[serde(rename = "releaseDate", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    /// The name of the size of the Amazon catalog item.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// The name of the style that is associated with the Amazon catalog item.
    #[serde(rename = "style", skip_serializing_if = "Option::is_none")]
    pub style: Option<String>,
    /// When true, the Amazon catalog item is eligible for trade-in.
    #[serde(rename = "tradeInEligible", skip_serializing_if = "Option::is_none")]
    pub trade_in_eligible: Option<bool>,
    /// The identifier of the website display group that is associated with the Amazon catalog item.
    #[serde(rename = "websiteDisplayGroup", skip_serializing_if = "Option::is_none")]
    pub website_display_group: Option<String>,
    /// The display name of the website display group that is associated with the Amazon catalog item.
    #[serde(rename = "websiteDisplayGroupName", skip_serializing_if = "Option::is_none")]
    pub website_display_group_name: Option<String>,
}

impl ItemSummaryByMarketplace {
    /// Information about an Amazon catalog item for the indicated `marketplaceId`.
    pub fn new(marketplace_id: String) -> ItemSummaryByMarketplace {
        ItemSummaryByMarketplace {
            marketplace_id,
            adult_product: None,
            autographed: None,
            brand: None,
            browse_classification: None,
            color: None,
            contributors: None,
            item_classification: None,
            item_name: None,
            manufacturer: None,
            memorabilia: None,
            model_number: None,
            package_quantity: None,
            part_number: None,
            release_date: None,
            size: None,
            style: None,
            trade_in_eligible: None,
            website_display_group: None,
            website_display_group_name: None,
        }
    }
}
/// Classification type that is associated with the Amazon catalog item.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ItemClassification {
    #[serde(rename = "BASE_PRODUCT")]
    BaseProduct,
    #[serde(rename = "OTHER")]
    Other,
    #[serde(rename = "PRODUCT_BUNDLE")]
    ProductBundle,
    #[serde(rename = "VARIATION_PARENT")]
    VariationParent,
}

impl Default for ItemClassification {
    fn default() -> ItemClassification {
        Self::BaseProduct
    }
}

