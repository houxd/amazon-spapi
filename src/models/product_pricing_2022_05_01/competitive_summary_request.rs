/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CompetitiveSummaryRequest : An individual `competitiveSummary` request for an ASIN and `marketplaceId`.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompetitiveSummaryRequest {
    /// The ASIN of the item.
    #[serde(rename = "asin")]
    pub asin: String,
    /// The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    #[serde(rename = "marketplaceId")]
    pub marketplace_id: String,
    /// The list of requested competitive pricing data for the product.
    #[serde(rename = "includedData")]
    pub included_data: Vec<models::product_pricing_2022_05_01::CompetitiveSummaryIncludedData>,
    /// The list of `lowestPricedOffersInput` parameters that are used to build `lowestPricedOffers` in the response. This attribute is only valid if `lowestPricedOffers` is requested in `includedData`
    #[serde(rename = "lowestPricedOffersInputs", skip_serializing_if = "Option::is_none")]
    pub lowest_priced_offers_inputs: Option<Vec<models::product_pricing_2022_05_01::LowestPricedOffersInput>>,
    #[serde(rename = "method")]
    pub method: models::product_pricing_2022_05_01::HttpMethod,
    /// The URI associated with the individual APIs that are called as part of the batch request.
    #[serde(rename = "uri")]
    pub uri: String,
}

impl CompetitiveSummaryRequest {
    /// An individual `competitiveSummary` request for an ASIN and `marketplaceId`.
    pub fn new(asin: String, marketplace_id: String, included_data: Vec<models::product_pricing_2022_05_01::CompetitiveSummaryIncludedData>, method: models::product_pricing_2022_05_01::HttpMethod, uri: String) -> CompetitiveSummaryRequest {
        CompetitiveSummaryRequest {
            asin,
            marketplace_id,
            included_data,
            lowest_priced_offers_inputs: None,
            method,
            uri,
        }
    }
}

