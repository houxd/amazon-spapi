/*
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CompetitiveSummaryResponseBody : The `competitiveSummaryResponse` body for a requested ASIN and `marketplaceId`.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompetitiveSummaryResponseBody {
    /// The ASIN of the item.
    #[serde(rename = "asin")]
    pub asin: String,
    /// The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    #[serde(rename = "marketplaceId")]
    pub marketplace_id: String,
    /// A list of featured buying options for the specified ASIN `marketplaceId` combination.
    #[serde(rename = "featuredBuyingOptions", skip_serializing_if = "Option::is_none")]
    pub featured_buying_options: Option<Vec<models::product_pricing_2022_05_01::FeaturedBuyingOption>>,
    /// A list of lowest priced offers for the specified ASIN `marketplaceId` combination.
    #[serde(rename = "lowestPricedOffers", skip_serializing_if = "Option::is_none")]
    pub lowest_priced_offers: Option<Vec<models::product_pricing_2022_05_01::LowestPricedOffer>>,
    /// A list of reference prices for the specified ASIN `marketplaceId` combination.
    #[serde(rename = "referencePrices", skip_serializing_if = "Option::is_none")]
    pub reference_prices: Option<Vec<models::product_pricing_2022_05_01::ReferencePrice>>,
    /// A list of error responses that are returned when a request is unsuccessful.
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<models::product_pricing_2022_05_01::Error>>,
}

impl CompetitiveSummaryResponseBody {
    /// The `competitiveSummaryResponse` body for a requested ASIN and `marketplaceId`.
    pub fn new(asin: String, marketplace_id: String) -> CompetitiveSummaryResponseBody {
        CompetitiveSummaryResponseBody {
            asin,
            marketplace_id,
            featured_buying_options: None,
            lowest_priced_offers: None,
            reference_prices: None,
            errors: None,
        }
    }
}

