/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EventCode : The event code for the delivery event.
/// The event code for the delivery event.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventCode {
    #[serde(rename = "EVENT_101")]
    Event101,
    #[serde(rename = "EVENT_102")]
    Event102,
    #[serde(rename = "EVENT_201")]
    Event201,
    #[serde(rename = "EVENT_202")]
    Event202,
    #[serde(rename = "EVENT_203")]
    Event203,
    #[serde(rename = "EVENT_204")]
    Event204,
    #[serde(rename = "EVENT_205")]
    Event205,
    #[serde(rename = "EVENT_206")]
    Event206,
    #[serde(rename = "EVENT_301")]
    Event301,
    #[serde(rename = "EVENT_302")]
    Event302,
    #[serde(rename = "EVENT_304")]
    Event304,
    #[serde(rename = "EVENT_306")]
    Event306,
    #[serde(rename = "EVENT_307")]
    Event307,
    #[serde(rename = "EVENT_308")]
    Event308,
    #[serde(rename = "EVENT_309")]
    Event309,
    #[serde(rename = "EVENT_401")]
    Event401,
    #[serde(rename = "EVENT_402")]
    Event402,
    #[serde(rename = "EVENT_403")]
    Event403,
    #[serde(rename = "EVENT_404")]
    Event404,
    #[serde(rename = "EVENT_405")]
    Event405,
    #[serde(rename = "EVENT_406")]
    Event406,
    #[serde(rename = "EVENT_407")]
    Event407,
    #[serde(rename = "EVENT_408")]
    Event408,
    #[serde(rename = "EVENT_409")]
    Event409,
    #[serde(rename = "EVENT_411")]
    Event411,
    #[serde(rename = "EVENT_412")]
    Event412,
    #[serde(rename = "EVENT_413")]
    Event413,
    #[serde(rename = "EVENT_414")]
    Event414,
    #[serde(rename = "EVENT_415")]
    Event415,
    #[serde(rename = "EVENT_416")]
    Event416,
    #[serde(rename = "EVENT_417")]
    Event417,
    #[serde(rename = "EVENT_418")]
    Event418,
    #[serde(rename = "EVENT_419")]
    Event419,

}

impl std::fmt::Display for EventCode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Event101 => write!(f, "EVENT_101"),
            Self::Event102 => write!(f, "EVENT_102"),
            Self::Event201 => write!(f, "EVENT_201"),
            Self::Event202 => write!(f, "EVENT_202"),
            Self::Event203 => write!(f, "EVENT_203"),
            Self::Event204 => write!(f, "EVENT_204"),
            Self::Event205 => write!(f, "EVENT_205"),
            Self::Event206 => write!(f, "EVENT_206"),
            Self::Event301 => write!(f, "EVENT_301"),
            Self::Event302 => write!(f, "EVENT_302"),
            Self::Event304 => write!(f, "EVENT_304"),
            Self::Event306 => write!(f, "EVENT_306"),
            Self::Event307 => write!(f, "EVENT_307"),
            Self::Event308 => write!(f, "EVENT_308"),
            Self::Event309 => write!(f, "EVENT_309"),
            Self::Event401 => write!(f, "EVENT_401"),
            Self::Event402 => write!(f, "EVENT_402"),
            Self::Event403 => write!(f, "EVENT_403"),
            Self::Event404 => write!(f, "EVENT_404"),
            Self::Event405 => write!(f, "EVENT_405"),
            Self::Event406 => write!(f, "EVENT_406"),
            Self::Event407 => write!(f, "EVENT_407"),
            Self::Event408 => write!(f, "EVENT_408"),
            Self::Event409 => write!(f, "EVENT_409"),
            Self::Event411 => write!(f, "EVENT_411"),
            Self::Event412 => write!(f, "EVENT_412"),
            Self::Event413 => write!(f, "EVENT_413"),
            Self::Event414 => write!(f, "EVENT_414"),
            Self::Event415 => write!(f, "EVENT_415"),
            Self::Event416 => write!(f, "EVENT_416"),
            Self::Event417 => write!(f, "EVENT_417"),
            Self::Event418 => write!(f, "EVENT_418"),
            Self::Event419 => write!(f, "EVENT_419"),
        }
    }
}

impl Default for EventCode {
    fn default() -> EventCode {
        Self::Event101
    }
}

