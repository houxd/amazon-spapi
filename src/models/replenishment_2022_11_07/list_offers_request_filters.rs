/*
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ListOffersRequestFilters : Use these parameters to filter results. Any result must match all of the provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListOffersRequestFilters {
    /// The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
    #[serde(rename = "marketplaceId")]
    pub marketplace_id: String,
    /// A list of SKUs to filter. This filter is only supported for sellers and not for vendors.
    #[serde(rename = "skus", skip_serializing_if = "Option::is_none")]
    pub skus: Option<Vec<String>>,
    /// A list of Amazon Standard Identification Numbers (ASINs).
    #[serde(rename = "asins", skip_serializing_if = "Option::is_none")]
    pub asins: Option<Vec<String>>,
    /// A list of eligibilities associated with an offer.
    #[serde(rename = "eligibilities", skip_serializing_if = "Option::is_none")]
    pub eligibilities: Option<Vec<models::replenishment_2022_11_07::EligibilityStatus>>,
    #[serde(rename = "preferences", skip_serializing_if = "Option::is_none")]
    pub preferences: Option<Box<models::replenishment_2022_11_07::Preference>>,
    #[serde(rename = "promotions", skip_serializing_if = "Option::is_none")]
    pub promotions: Option<Box<models::replenishment_2022_11_07::Promotion>>,
    /// A list of replenishment program types.
    #[serde(rename = "programTypes")]
    pub program_types: Vec<models::replenishment_2022_11_07::ProgramType>,
}

impl ListOffersRequestFilters {
    /// Use these parameters to filter results. Any result must match all of the provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.
    pub fn new(marketplace_id: String, program_types: Vec<models::replenishment_2022_11_07::ProgramType>) -> ListOffersRequestFilters {
        ListOffersRequestFilters {
            marketplace_id,
            skus: None,
            asins: None,
            eligibilities: None,
            preferences: None,
            promotions: None,
            program_types,
        }
    }
}

