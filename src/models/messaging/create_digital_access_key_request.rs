/*
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateDigitalAccessKeyRequest : The request schema for the `createDigitalAccessKey` operation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateDigitalAccessKeyRequest {
    /// The text that is sent to the buyer. Only links that are related to the digital access key are allowed. Do not include HTML or email addresses. The text must be written in the buyer's preferred language, which you can retrieve from the `GetAttributes` operation.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// Attachments that you want to include in the message to the buyer.
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<models::messaging::Attachment>>,
}

impl CreateDigitalAccessKeyRequest {
    /// The request schema for the `createDigitalAccessKey` operation.
    pub fn new() -> CreateDigitalAccessKeyRequest {
        CreateDigitalAccessKeyRequest {
            text: None,
            attachments: None,
        }
    }
}

