/*
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderChangeTypeEnum : The supported order change type of ORDER_CHANGE notification.
/// The supported order change type of ORDER_CHANGE notification.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderChangeTypeEnum {
    #[serde(rename = "OrderStatusChange")]
    OrderStatusChange,
    #[serde(rename = "BuyerRequestedChange")]
    BuyerRequestedChange,

}

impl std::fmt::Display for OrderChangeTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::OrderStatusChange => write!(f, "OrderStatusChange"),
            Self::BuyerRequestedChange => write!(f, "BuyerRequestedChange"),
        }
    }
}

impl Default for OrderChangeTypeEnum {
    fn default() -> OrderChangeTypeEnum {
        Self::OrderStatusChange
    }
}

