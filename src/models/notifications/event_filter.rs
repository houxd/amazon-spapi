/*
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EventFilter : A `notificationType` specific filter. This object contains all of the currently available filters and properties that you can use to define a `notificationType` specific filter.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventFilter {
    #[serde(rename = "aggregationSettings", skip_serializing_if = "Option::is_none")]
    pub aggregation_settings: Option<Box<models::notifications::AggregationSettings>>,
    /// A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.
    #[serde(rename = "marketplaceIds", skip_serializing_if = "Option::is_none")]
    pub marketplace_ids: Option<Vec<String>>,
    /// A list of order change types to subscribe to (for example: `BuyerRequestedChange`). To receive notifications of all change types, do not provide this list.
    #[serde(rename = "orderChangeTypes", skip_serializing_if = "Option::is_none")]
    pub order_change_types: Option<Vec<models::notifications::OrderChangeTypeEnum>>,
    /// An `eventFilterType` value that is supported by the specific `notificationType`. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an `eventFilterType` is supported.
    #[serde(rename = "eventFilterType")]
    pub event_filter_type: EventFilterType,
}

impl EventFilter {
    /// A `notificationType` specific filter. This object contains all of the currently available filters and properties that you can use to define a `notificationType` specific filter.
    pub fn new(event_filter_type: EventFilterType) -> EventFilter {
        EventFilter {
            aggregation_settings: None,
            marketplace_ids: None,
            order_change_types: None,
            event_filter_type,
        }
    }
}
/// An `eventFilterType` value that is supported by the specific `notificationType`. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an `eventFilterType` is supported.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventFilterType {
    #[serde(rename = "ANY_OFFER_CHANGED")]
    AnyOfferChanged,
    #[serde(rename = "ORDER_CHANGE")]
    OrderChange,
}

impl Default for EventFilterType {
    fn default() -> EventFilterType {
        Self::AnyOfferChanged
    }
}

