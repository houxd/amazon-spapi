/*
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TaxDetails : The tax details for the order. _Note:_ Amazon calculates tax on the list price (Amazon retail price).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaxDetails {
    /// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.
    #[serde(rename = "taxRate", skip_serializing_if = "Option::is_none")]
    pub tax_rate: Option<String>,
    #[serde(rename = "taxAmount")]
    pub tax_amount: Box<models::vendor_direct_fulfillment_orders_2021_12_28::Money>,
    #[serde(rename = "taxableAmount", skip_serializing_if = "Option::is_none")]
    pub taxable_amount: Option<Box<models::vendor_direct_fulfillment_orders_2021_12_28::Money>>,
    /// Tax type.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl TaxDetails {
    /// The tax details for the order. _Note:_ Amazon calculates tax on the list price (Amazon retail price).
    pub fn new(tax_amount: models::vendor_direct_fulfillment_orders_2021_12_28::Money) -> TaxDetails {
        TaxDetails {
            tax_rate: None,
            tax_amount: Box::new(tax_amount),
            taxable_amount: None,
            r#type: None,
        }
    }
}
/// Tax type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "CONSUMPTION")]
    Consumption,
    #[serde(rename = "GST")]
    Gst,
    #[serde(rename = "MwSt.")]
    MwStPeriod,
    #[serde(rename = "PST")]
    Pst,
    #[serde(rename = "TOTAL")]
    Total,
    #[serde(rename = "TVA")]
    Tva,
    #[serde(rename = "VAT")]
    Vat,
}

impl Default for Type {
    fn default() -> Type {
        Self::Consumption
    }
}

