/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TaxCollection : Information about withheld taxes.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaxCollection {
    /// The tax collection model applied to the item.
    #[serde(rename = "Model", skip_serializing_if = "Option::is_none")]
    pub model: Option<Model>,
    /// The party responsible for withholding the taxes and remitting them to the taxing authority.
    #[serde(rename = "ResponsibleParty", skip_serializing_if = "Option::is_none")]
    pub responsible_party: Option<ResponsibleParty>,
}

impl TaxCollection {
    /// Information about withheld taxes.
    pub fn new() -> TaxCollection {
        TaxCollection {
            model: None,
            responsible_party: None,
        }
    }
}
/// The tax collection model applied to the item.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Model {
    #[serde(rename = "MarketplaceFacilitator")]
    MarketplaceFacilitator,
}

impl Default for Model {
    fn default() -> Model {
        Self::MarketplaceFacilitator
    }
}
/// The party responsible for withholding the taxes and remitting them to the taxing authority.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResponsibleParty {
    #[serde(rename = "Amazon Services, Inc.")]
    AmazonServicesCommaIncPeriod,
}

impl Default for ResponsibleParty {
    fn default() -> ResponsibleParty {
        Self::AmazonServicesCommaIncPeriod
    }
}

