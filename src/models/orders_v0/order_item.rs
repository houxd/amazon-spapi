/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderItem : A single order item.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderItem {
    /// The item's Amazon Standard Identification Number (ASIN).
    #[serde(rename = "ASIN")]
    pub asin: String,
    /// The item's seller stock keeping unit (SKU).
    #[serde(rename = "SellerSKU", skip_serializing_if = "Option::is_none")]
    pub seller_sku: Option<String>,
    /// An Amazon-defined order item identifier.
    #[serde(rename = "OrderItemId")]
    pub order_item_id: String,
    /// A list of associated items that a customer has purchased with a product. For example, a tire installation service purchased with tires.
    #[serde(rename = "AssociatedItems", skip_serializing_if = "Option::is_none")]
    pub associated_items: Option<Vec<models::orders_v0::AssociatedItem>>,
    /// The item's name.
    #[serde(rename = "Title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The number of items in the order. 
    #[serde(rename = "QuantityOrdered")]
    pub quantity_ordered: i32,
    /// The number of items shipped.
    #[serde(rename = "QuantityShipped", skip_serializing_if = "Option::is_none")]
    pub quantity_shipped: Option<i32>,
    #[serde(rename = "ProductInfo", skip_serializing_if = "Option::is_none")]
    pub product_info: Option<Box<models::orders_v0::ProductInfoDetail>>,
    #[serde(rename = "PointsGranted", skip_serializing_if = "Option::is_none")]
    pub points_granted: Option<Box<models::orders_v0::PointsGrantedDetail>>,
    #[serde(rename = "ItemPrice", skip_serializing_if = "Option::is_none")]
    pub item_price: Option<Box<models::orders_v0::Money>>,
    #[serde(rename = "ShippingPrice", skip_serializing_if = "Option::is_none")]
    pub shipping_price: Option<Box<models::orders_v0::Money>>,
    #[serde(rename = "ItemTax", skip_serializing_if = "Option::is_none")]
    pub item_tax: Option<Box<models::orders_v0::Money>>,
    #[serde(rename = "ShippingTax", skip_serializing_if = "Option::is_none")]
    pub shipping_tax: Option<Box<models::orders_v0::Money>>,
    #[serde(rename = "ShippingDiscount", skip_serializing_if = "Option::is_none")]
    pub shipping_discount: Option<Box<models::orders_v0::Money>>,
    #[serde(rename = "ShippingDiscountTax", skip_serializing_if = "Option::is_none")]
    pub shipping_discount_tax: Option<Box<models::orders_v0::Money>>,
    #[serde(rename = "PromotionDiscount", skip_serializing_if = "Option::is_none")]
    pub promotion_discount: Option<Box<models::orders_v0::Money>>,
    #[serde(rename = "PromotionDiscountTax", skip_serializing_if = "Option::is_none")]
    pub promotion_discount_tax: Option<Box<models::orders_v0::Money>>,
    /// A list of promotion identifiers provided by the seller when the promotions were created.
    #[serde(rename = "PromotionIds", skip_serializing_if = "Option::is_none")]
    pub promotion_ids: Option<Vec<String>>,
    #[serde(rename = "CODFee", skip_serializing_if = "Option::is_none")]
    pub cod_fee: Option<Box<models::orders_v0::Money>>,
    #[serde(rename = "CODFeeDiscount", skip_serializing_if = "Option::is_none")]
    pub cod_fee_discount: Option<Box<models::orders_v0::Money>>,
    /// Indicates whether the item is a gift.  **Possible values**: `true` and `false`.
    #[serde(rename = "IsGift", skip_serializing_if = "Option::is_none")]
    pub is_gift: Option<String>,
    /// The condition of the item, as described by the seller.
    #[serde(rename = "ConditionNote", skip_serializing_if = "Option::is_none")]
    pub condition_note: Option<String>,
    /// The condition of the item.  **Possible values**: `New`, `Used`, `Collectible`, `Refurbished`, `Preorder`, and `Club`.
    #[serde(rename = "ConditionId", skip_serializing_if = "Option::is_none")]
    pub condition_id: Option<String>,
    /// The subcondition of the item.  **Possible values**: `New`, `Mint`, `Very Good`, `Good`, `Acceptable`, `Poor`, `Club`, `OEM`, `Warranty`, `Refurbished Warranty`, `Refurbished`, `Open Box`, `Any`, and `Other`.
    #[serde(rename = "ConditionSubtypeId", skip_serializing_if = "Option::is_none")]
    pub condition_subtype_id: Option<String>,
    /// The start date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
    #[serde(rename = "ScheduledDeliveryStartDate", skip_serializing_if = "Option::is_none")]
    pub scheduled_delivery_start_date: Option<String>,
    /// The end date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
    #[serde(rename = "ScheduledDeliveryEndDate", skip_serializing_if = "Option::is_none")]
    pub scheduled_delivery_end_date: Option<String>,
    /// Indicates that the selling price is a special price that is only available for Amazon Business orders. For more information about the Amazon Business Seller Program, refer to the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   **Possible values**: `BusinessPrice`
    #[serde(rename = "PriceDesignation", skip_serializing_if = "Option::is_none")]
    pub price_designation: Option<String>,
    #[serde(rename = "TaxCollection", skip_serializing_if = "Option::is_none")]
    pub tax_collection: Option<Box<models::orders_v0::TaxCollection>>,
    /// When true, the product type for this item has a serial number.   Only returned for Amazon Easy Ship orders.
    #[serde(rename = "SerialNumberRequired", skip_serializing_if = "Option::is_none")]
    pub serial_number_required: Option<bool>,
    /// When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:  **1D or 2D Barcode:** This has a **T** logo. Submit either the 29-character alpha-numeric identifier beginning with **AZ** or **ZA**, or the 38-character Serialized Global Trade Item Number (SGTIN). **2D Barcode SN:** Submit the 7- to 20-character serial number barcode, which likely has the prefix **SN**. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode. **QR code SN:** Submit the URL that the QR code generates.
    #[serde(rename = "IsTransparency", skip_serializing_if = "Option::is_none")]
    pub is_transparency: Option<bool>,
    /// The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
    #[serde(rename = "IossNumber", skip_serializing_if = "Option::is_none")]
    pub ioss_number: Option<String>,
    /// The store chain store identifier. Linked to a specific store in a store chain.
    #[serde(rename = "StoreChainStoreId", skip_serializing_if = "Option::is_none")]
    pub store_chain_store_id: Option<String>,
    /// The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
    #[serde(rename = "DeemedResellerCategory", skip_serializing_if = "Option::is_none")]
    pub deemed_reseller_category: Option<DeemedResellerCategory>,
    #[serde(rename = "BuyerInfo", skip_serializing_if = "Option::is_none")]
    pub buyer_info: Option<Box<models::orders_v0::ItemBuyerInfo>>,
    #[serde(rename = "BuyerRequestedCancel", skip_serializing_if = "Option::is_none")]
    pub buyer_requested_cancel: Option<Box<models::orders_v0::BuyerRequestedCancel>>,
    /// A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only.
    #[serde(rename = "SerialNumbers", skip_serializing_if = "Option::is_none")]
    pub serial_numbers: Option<Vec<String>>,
    #[serde(rename = "SubstitutionPreferences", skip_serializing_if = "Option::is_none")]
    pub substitution_preferences: Option<Box<models::orders_v0::SubstitutionPreferences>>,
    #[serde(rename = "Measurement", skip_serializing_if = "Option::is_none")]
    pub measurement: Option<Box<models::orders_v0::Measurement>>,
    #[serde(rename = "ShippingConstraints", skip_serializing_if = "Option::is_none")]
    pub shipping_constraints: Option<Box<models::orders_v0::ShippingConstraints>>,
    #[serde(rename = "AmazonPrograms", skip_serializing_if = "Option::is_none")]
    pub amazon_programs: Option<Box<models::orders_v0::AmazonPrograms>>,
}

impl OrderItem {
    /// A single order item.
    pub fn new(asin: String, order_item_id: String, quantity_ordered: i32) -> OrderItem {
        OrderItem {
            asin,
            seller_sku: None,
            order_item_id,
            associated_items: None,
            title: None,
            quantity_ordered,
            quantity_shipped: None,
            product_info: None,
            points_granted: None,
            item_price: None,
            shipping_price: None,
            item_tax: None,
            shipping_tax: None,
            shipping_discount: None,
            shipping_discount_tax: None,
            promotion_discount: None,
            promotion_discount_tax: None,
            promotion_ids: None,
            cod_fee: None,
            cod_fee_discount: None,
            is_gift: None,
            condition_note: None,
            condition_id: None,
            condition_subtype_id: None,
            scheduled_delivery_start_date: None,
            scheduled_delivery_end_date: None,
            price_designation: None,
            tax_collection: None,
            serial_number_required: None,
            is_transparency: None,
            ioss_number: None,
            store_chain_store_id: None,
            deemed_reseller_category: None,
            buyer_info: None,
            buyer_requested_cancel: None,
            serial_numbers: None,
            substitution_preferences: None,
            measurement: None,
            shipping_constraints: None,
            amazon_programs: None,
        }
    }
}
/// The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeemedResellerCategory {
    #[serde(rename = "IOSS")]
    Ioss,
    #[serde(rename = "UOSS")]
    Uoss,
}

impl Default for DeemedResellerCategory {
    fn default() -> DeemedResellerCategory {
        Self::Ioss
    }
}

