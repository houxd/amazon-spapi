/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ConfirmShipmentRequest : The request schema for an shipment confirmation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfirmShipmentRequest {
    #[serde(rename = "packageDetail")]
    pub package_detail: Box<models::orders_v0::PackageDetail>,
    /// The COD collection method (only supported in the JP marketplace).
    #[serde(rename = "codCollectionMethod", skip_serializing_if = "Option::is_none")]
    pub cod_collection_method: Option<CodCollectionMethod>,
    /// The unobfuscated marketplace identifier.
    #[serde(rename = "marketplaceId")]
    pub marketplace_id: String,
}

impl ConfirmShipmentRequest {
    /// The request schema for an shipment confirmation.
    pub fn new(package_detail: models::orders_v0::PackageDetail, marketplace_id: String) -> ConfirmShipmentRequest {
        ConfirmShipmentRequest {
            package_detail: Box::new(package_detail),
            cod_collection_method: None,
            marketplace_id,
        }
    }
}
/// The COD collection method (only supported in the JP marketplace).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CodCollectionMethod {
    #[serde(rename = "DirectPayment")]
    DirectPayment,
}

impl Default for CodCollectionMethod {
    fn default() -> CodCollectionMethod {
        Self::DirectPayment
    }
}

