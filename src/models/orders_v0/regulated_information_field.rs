/*
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RegulatedInformationField : A field collected from the regulatory form.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegulatedInformationField {
    /// The unique identifier of the field.
    #[serde(rename = "FieldId")]
    pub field_id: String,
    /// The name of the field.
    #[serde(rename = "FieldLabel")]
    pub field_label: String,
    /// The type of field.
    #[serde(rename = "FieldType")]
    pub field_type: FieldType,
    /// The content of the field as collected in regulatory form. Note that `FileAttachment` type fields contain a URL where you can download the attachment.
    #[serde(rename = "FieldValue")]
    pub field_value: String,
}

impl RegulatedInformationField {
    /// A field collected from the regulatory form.
    pub fn new(field_id: String, field_label: String, field_type: FieldType, field_value: String) -> RegulatedInformationField {
        RegulatedInformationField {
            field_id,
            field_label,
            field_type,
            field_value,
        }
    }
}
/// The type of field.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FieldType {
    #[serde(rename = "Text")]
    Text,
    #[serde(rename = "FileAttachment")]
    FileAttachment,
}

impl Default for FieldType {
    fn default() -> FieldType {
        Self::Text
    }
}

